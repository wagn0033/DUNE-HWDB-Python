#!/usr/bin/env python

import sys, os
import shutil
import subprocess
import re
from datetime import datetime, timezone

from Sisyphus.Utils.Terminal.Style import Style

loglevel_styles = \
{
    #'DEBUG': Style.fg(0x666666),
    'DEBUG': Style.debug,
    'INFO': Style.info,
    'WARNING': Style.warning,
    'ERROR': Style.error,
    'CRITICAL': Style.critical,
}
unknown_style = Style.fg(0xff99ff)

teststatus_styles = \
{
    'TEST': Style.test,
    'PASS': Style.success,
    'FAIL': Style.fail,
}

requestmethod_styles = \
{
    'GET': Style.bg(0x222266),
    'POST': Style.bg(0x222266),
    'PATCH': Style.bg(0x222266),
}

loginit_style = Style.fg(0xffffff).bg(0x0037da).bold()
big_style = Style.large().fg(0x999999).italic()


re_datetime = re.compile(r"""
    ^
    (?P<datetime>[0-9]{4}-[0-9]{2}-[0-9]{2}T
                            [0-9]{2}:[0-9]{2}:[0-9]{2}(?:[.][0-9]{1,3}){0,1})[ ]
    \[(?P<loglevel>[A-Z]*)\][ ]
    (?P<filename>[^,]*),[ ]
    (?P<line_no>line[ ][0-9]*)[ ]
    \((?P<thread>[^)]*)\):[ ]
    (?P<remainder>.*)
    $
""", re.VERBOSE)

re_teststatus = re.compile(r"""
    ^
    \[(?P<teststatus>TEST|PASS|FAIL)[ ]
    (?P<testname>[^\]]*)\]
    (?P<residue>.*)
    $
""", re.VERBOSE)

re_loginit = re.compile(r"""
    ^
    \[LOG[ ]INIT\]
    (?P<remainder>.*)
    $
""", re.VERBOSE)

re_requestmethod = re.compile(r"""
    ^
    (?P<before>.*)
    \[(?P<method>GET|POST|PATCH)\]
    (?P<after>.*)
    $
""", re.VERBOSE)


clear_to_end = "\x1b[K"

def main(argv):
    sys.stdout.write("\033]0;HWDB Logs\007")
    logfile = os.path.normpath(os.path.expanduser("~/.sisyphus/log.txt"))

    f = subprocess.Popen(['tail', '-F', '-n', '1000', logfile],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    prev_date = datetime(1900, 1, 1).date()
    style = unknown_style

    while True:
        line, _ = f.stdout.readline().decode().split('\n')
    
        try:    
            match = re_datetime.fullmatch(line)

            if match:
                #print(len(match['datetime']))
                padded_datetime = match['datetime']
                if len(padded_datetime) == 19:
                    padded_datetime += ".000"
                elif len(padded_datetime) == 21:
                    padded_datetime += "00"
                elif len(padded_datetime) == 22:
                    padded_datetime += "0"
                #padded_datetime = (match['datetime'] + "00")[:23]
                curr_datetime = (
                            datetime.fromisoformat(padded_datetime)
                                .replace(tzinfo=timezone.utc)
                                .astimezone())
                curr_date = curr_datetime.date()            

                if curr_date != prev_date:
                    prev_date = curr_date
                    fmtdate = curr_date.strftime("%A, %B %-d, %Y")
                    print( big_style(fmtdate))
            
                fmttime = curr_datetime.strftime("%H:%M:%S.%f")[:-3]

                style = loglevel_styles.get(match['loglevel'], unknown_style)

                match2 = re_teststatus.fullmatch(match['remainder'])
                match3 = re_loginit.fullmatch(match['remainder'])
                match4 = re_requestmethod.match(match['remainder'])

                if match3:
                    style = loginit_style

                style.print(f"{fmttime} ",
                            f"[{match['loglevel']}] ",
                            f"{match['filename']}, ",
                            f"{match['line_no']}", sep='', end='')
                if match['thread'] != "MainThread":
                    style.print(f" ({match['thread']})", end='')
                style.print(": ", end='')

                if match2:
                    style2 = teststatus_styles.get(match2['teststatus'], unknown_style)
                    style2.print(f"[{match2['teststatus']} {match2['testname']}]", end='')
                    style.print(f"{match2['residue']}", clear_to_end, sep='')
                elif match3:
                    style.print("[LOG INIT]", match3['remainder'], clear_to_end, sep='')
                elif match4:
                    method = match4['method']
                    methodstyle = Style(style, requestmethod_styles.get(method, unknown_style))
                    style.print(f"{match4['before']}", end='')
                    methodstyle.print(f"[{match4['method']}]", end='')
                    style.print(f"{match4['after']}")
                else:
                    style.print(f"{match['remainder']}", clear_to_end, sep='')
            else:
                style.print(line, clear_to_end, sep='')
        except Exception as err:
            unknown_style.print(line, clear_to_end, sep='')

if __name__ == "__main__":
    try:
        sys.exit(main(sys.argv))
    except KeyboardInterrupt:
        sys.stdout.write('\n')
        sys.exit(0)
