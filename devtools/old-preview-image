#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright (c) 2024 Regents of the University of Minnesota
Author: Alex Wagner <wagn0033@umn.edu>, Dept. of Physics and Astronomy
"""

from Sisyphus.Utils.Terminal import Image
import argparse
import sys

def parse_args(argv):

    description = "Preview an image in the terminal"

    arg_table = [
        (('filename',), {"metavar": "<filename>"}),
        
        (('--max-columns', '-c'), 
                    {"metavar": "columns", "dest": "maxcols", "required": False,
                        "type": int,
                        "help": "Limit width of image to this maximum, but do not "
                            "stretch the image if it is smaller. Aspect ratio will be "
                            "respected. Defaults to the width of the terminal, or 80 "
                            "columns if stdout is not a tty."}),
        (('--max-lines', '-l'), 
                    {"metavar": "<lines>", "dest": "maxlines", "required": False,
                        "type": int,
                        "help": "Limit height of image to this maximum, with similar "
                            "rules as --max-columns. Defaults to the width of the "
                            "terminal, or 24 lines if stdout is not a tty."}),

        (('--columns', '-C'), 
                    {"metavar": "columns", "dest": "columns", "required": False, 
                        "type": int,
                        "help": "Set the width of the image to this exact number of "
                            "columns. If --lines is not set, it will be calculated "
                            "from the aspect ratio of the image."}),
        (('--lines', '-L'), 
                    {"metavar": "lines", "dest": "lines", "required": False,
                        "type": int,
                        "help": "Set the height of the image to this exact number of "
                            "lines. If --columns is not set, it will be calculated "
                            "from the aspect ratio of the image."}),

        (('--background-color', '-b'), 
                {"metavar": "<color>", "dest": "background", "required": False,
                    "help": "If the image has an alpha channel, use this color as the "
                        "background. Color can be a named color, a hex value (e.g., "
                        "'#ffffff'), or a triplet of values from 0-255 with no spaces "
                        "(e.g., '255,255,255')."}),
    ]

    parser = argparse.ArgumentParser(description=description, add_help=True)

    for args, kwargs in arg_table:
        parser.add_argument(*args, **kwargs)

    args = parser.parse_args(argv[1:])
    
    return args

def main(argv=None):
    if argv is None:
        argv = sys.argv
    args = parse_args(argv)
   
    #print(args)
 
    print(Image.image2text(source=args.filename, columns=args.columns, lines=args.lines,
                            max_columns=args.maxcols, max_lines=args.maxlines,
                            background=args.background))

if __name__ == '__main__':
    sys.exit(main(sys.argv))
